==========================================
CIS*2750 - Assignment Documentation

Andrew Crowell
0545826
==========================================

~~~~~~~~~~~~~~~~~
Table of Contents
~~~~~~~~~~~~~~~~~
0.  Directory Listing
1.  Assignment 1
      Parameter Manager (due January 20, 2008)
2.  Assignment 2
      Dialogc (due February 17, 2008)
3.  Assignment 3
      System Tools (due March 9, 2008)

==========================================
0.  Directory Listing
  A summary of the more important stuff!
==========================================
adt/	A subfolder containing abstract data type definitions
	List.{c|h}	List ADT
	Queue.{c|h}	Queue ADT
	Table.{c|h}	Table ADT
	Boolean.h	Boolean ADT
	String.{c|h}	String helper routines
icons/	Pretty pictures!2.  Assignment 2
      Dialogc (due February 17, 2008)
ConfigCompiler.java	Compilation routines for parsing
ConfigManager.{c|h|java}	Native JNI wrapper class so Java can access ParameterManager
ParameterList.{c|h}		ParameterList ADT for storing lists of string values.
ParameterManager.{c|h}		ParameterManager ADT for parsing files populated with key=value; pairs.
FileBrowseDialog.java		A popup window that has a text field and file choose dialog.
DialogcDocument.java		A document with syntax highlighting
DialogcEditorPane.java		An editor that uses DialogcDocument
Dialogc.java			The big bad main class to invoke with Java.
IconButton.java			A button with an icon attached to it.
yadc.{y|l}			The external lex/yacc compiler for DialogC

==========================================
1. Assignment 1
  Parameter Manager (due January 20, 2008)
==========================================

My parameter manager library follows the specification to
the best of its ability. Some notes about my implementation:
* The files parsed must be plaintext. Unless all binary
  appears before the block this program parses.
* Whitespace is ignored completely (to my knowledge),
  although \n is treated as a comment terminator.
  It is not a parse error at the moment to put spaces in the middle of an
  identifier. But know that it will all be concatinated into one whitespace-less
  word.
* Both the parameter names and values must be non-empty strings.
* Assignments in the format cannot be chained.
  This is a data storage language, not C code.
* You shouldn't sprinkle extra semi-colons just for your amusement.
  It'll parse error, for being an idiot. Go home.
* Comment characters should not be whitespace nor any of the magic delimiters.
  This is because whitespace is ignored (as mentioned above), so it will probably
  result in either no comments or wonky behaviour. Magic characters are handled
  specially so if they doubled as a comment, it will likely result in a parse error
  but there's no saying it couldn't work under some funky circumstances.
  Just, you know, use a bit of common sense. There's only like 4 reserved characters,
  it shouldn't be that hard to avoid using them or whitespace as comments!
* Empty comma separated values are bad.
* Comments may appear anywhere, even midtext.
* If there are any unfinished statements by the end of the file, it will parse error
  you in violent ways.
* It's generally smart to put a size at least as big as the data you're storing.
  It SHOULD work with smaller sizes, but there's a chance there's a performance hit as a result.
* It REALLY should be noted it doesn't actually validate what identifier characters are there,
  just that they're not treatable as magic characters, not whitespace, and not in a comment.
* Parameters cannot be assigned twice.
* Yes, reals and ints can be negative, just caught that.

To build the library, you can either type just "make" or "make all" (at least at the time of this writing)
or type "make ParameterManager". To get the extra stuff like test programs that are not being marked, type
"make devbuild".

==========================================
1. Assignment 2
      Dialogc (due February 17, 2008)
==========================================

Dialogc works closely to the spec, with things to be noted:
* Any time the working directory or currently selected file is changed, the compilation and runtime arguments
  are returned to default, so be careful and only set these arguments AFTER you've gotten everything in the proper
  directory.
* Make sure that field names do not cause naming conflicts with JFrame or its parent classes (so any field name XXXX for which there is a getXXXX() or setXXXX() method in Swing's hierarchy), because it will currently cause undefined behaviour.
* Make sure that you "export LD_LIBRARY_PATH=." before attempting to run "java Dialogc"
* If for some reason the java include path does match the one that works in the Reynolds Building, then change it to be the valid path for your environment.

==========================================
1. Assignment 3
      System Tools (due February 17, 2008)
==========================================

* yadc is invoked by:
	./yadc [path-to-config] [project-name] [path-to-project-subdirectory]
* Either compiler will generate the following:
	<WorkingDirectory>/<ProjectName>/<ProjectName>.java
	<WorkingDirectory>/<ProjectName>/<ProjectName>FieldEdit.java
	<WorkingDirectory>/<ProjectName>/IllegalFieldValue.java
* Your ActionListeners must have a constructor that takes a <ProjectName>FieldEdit as a parameter.
* Any get<FieldName>() method declared in the <ProjectName>FieldEdit can throw a IllegalFieldValue exception.



